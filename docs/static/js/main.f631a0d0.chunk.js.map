{"version":3,"sources":["components/AddCategory.js","helpers/Gif.js","components/GifGridItem.js","components/GifGrid.js","hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gits","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","UseFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACQ,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,QAXtB,kBAiBZM,GAjBY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECFwB,SAACA,GAGzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAZAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAACC,GAEpBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKlB,CAACpB,IAEGqB,EDnB4BK,CAAa1B,GAAjCa,EAAf,EAAQN,KAAea,EAAvB,EAAuBA,QAGvB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE8BtBgB,EA3CM,WAIjB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BAGQ2C,EAAWnB,KAAI,SAACT,EAAUW,GAAX,OACX,cAAC,EAAD,CAEAX,SAAYA,GADLA,Y,MCxB/B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f631a0d0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 0){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n       \n    }\n\n    return (\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                >\n\n                </input>\n            </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","\n\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=f5v07qXUDAXHfIJiWUB7eijyutBwVX3A`;\n\n    const response = await fetch(url);\n\n    const { data } = await response.json();\n\n    const gits = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_large.url\n        }\n    });\n\n    \n\n    return gits;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url}) => {\n\n\n    return (\n        <div className='card animate__animated animate__bounce'>\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { UseFetchGifs } from '../hooks/UseFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\n    const { data : images, loading } = UseFetchGifs(category);\n\n\n    return (\n        <>\n            <h3 className='animate__animated animate__bounce'>{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className='card-grid'>\n                {\n                    images.map((img) => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n\n                        />\n                    ))\n                }\n            </div>\n\n        </>\n    )\n}\n\n","import { useEffect, useState } from \"react\"\n\nimport { getGifs } from '../helpers/Gif';\n\n\nexport const UseFetchGifs = (category) => {\n\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect(() => {\n        getGifs(category).then((imgs) => {\n\n            setState({\n                data: imgs,\n                loading: false\n            });\n\n\n        });\n    }, [category]);\n\n    return state;\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () =>{\n\n    //const categorias = ['One', 'Samuray X', 'Dragon ball', 'Naruto'];\n\n    const [categories, setCategories] = useState(['Naruto'])\n    \n    \n//    const handleAdd = () =>{\n//        setCategories([...categories, 'ejemplo']);\n//    }\n    \n    \n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={setCategories} />\n\n            <hr></hr>\n            <ol>\n                {\n\n                    categories.map((category, id) =>(\n                        <GifGrid \n                        key = {category}\n                        category = {category}/>\n                    ))\n\n                }\n\n            </ol>\n        </>\n    );\n\n\n}\n\n\n\n\n\n\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}